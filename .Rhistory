find.packages(:devtools"")
find.packages("devtools")
find.package("devtools")
find.package("devtools")
install.packages("devtools")
find.package("devtools")
library(devtools)
library(devtools)
find_rtools()
exit
exit()
quit
close()
x = 11
print (x)
x
print x
x
X
y <-7
y
ls
ls()
rm (y)
y
x.1 = 14
x1
x.1
x = "fsfshjk hsfdkjh"
x
11 + 14
sqrt(25)
sqrt(5)
log(2.71)
y = 8
y^(0.5)
log2(8)
ls
ls()
x.1
abs(-15)
sqrt
sqrt(y)
the code below if for .....
# the code below if for .....
clear
clc
clr
x = 9
x <- 11
x
x1 = c(1,3,5,9)
x1
gender = c("male","female")
gender
2:7
seq(from=1, to=7, by=1)
seq(from=1, to=7, by=0.25)
rep(1, times=10)
rep(1:3, times=5)
1:8
seq(from=1, to=8, by=3)
rep(seq(from=1, to=8, by=3), times=4)
x = 1:5
y = c(1,3,5,7,9)
y
x + 10
x - 10
x
x*2
x + y
x*y
x/y
x
y
y[3]
x[-3]
y[1:3]
ls
ls()
sqrt(4)
sqrt(4
)
getwd
getwd()
library(KernSmooth)
x <- list(a = 1:5, b= rnorm(10))
lapply(x,mean)
a
x[1]
x[2]
d <- rnorm(100,5)
d
b <- rnorm(10,1)
b
rnorm?
help(\)
help('rnorm')
a <- array(rnorm(2*2*10),CC(2,2,10))
a <- array(rnorm(2*2*10),C(2,2,10))
a <- array(rnorm(2*2*10),C(2,2,10))
a <- array(rnorm(2 * 2 * 10), c(2,2,10))
a
debug(ls)
ls
ls
exit
exit()
library(datasets)
iris?
)
data(iris)
?iris
iris
iris(iris$Species == verginica)
iris$Species
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
mtcars
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars$mpg, mtcars$cyl, mean)
mtcars$mpg
mtcars$cyl
lapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x
x[2,3] - x[2,1]
dim(x)
209.21429 -  82.63636
m <- Null
m <- NULL
m
type(m)
typeof(m)
class(m)
attributes(m)
m <- matrix(1:4,2,2)
m
solve(m)
pwd()
wd()
getwd
getwd()
setwd("C:/Users/Anshumaan/Desktop/Github/ProgrammingAssignment2")
source("cachematrix.R")
makeCacheMatrix(matrix(1:4),2,2)
makeCacheMatrix(matrix(1:4,2,2))
m <makeCacheMatrix(matrix(1:4,2,2))
m <- makeCacheMatrix(matrix(1:4,2,2))
m
cacheSolve(m)
cacheSolve(matrix(2:5,2,2))
cacheSolve(matrix(2:5,2,2) ...)
cacheSolve(matrix(2:5,2,2))
m <- matrix(2:5,2,2)
m
cacheSolve(m)
source("cachematrix.R")
amatrix = ma
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow = 2, ncol = 2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow = 2, ncol = 2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
amatrix <- makeCacheMatrix(matrix(1:4,2,2))
amatrix
amatrix$get
x
amatrix$get()
cacheSolve(amatrix)
amatrix$get()
amatrix$get() <- matrix(2:5,2,2)
amatrix$get <- matrix(2:5,2,2)
amatrix$get <- matrix(2:5,2,2)
amatrix$get
cacheSolve(amatrix)
m1 <- matrix(1:4,2,2)
m1
m2 <- matrix(4:8,2,2)
m2 <- matrix(4:7,2,2)
m2
m1
m2
m1 + m1
m1 + m2
m1 * m2
m1 %*% m2
m1
m2
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow = 2, ncol = 2))
amatrix
cacheSolve(amatrix)
cacheSolve(amatrix())
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow = 2, ncol = 2))
cacheSolve(amatrix)
amatrix$get
amatrix$get()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow = 2, ncol = 2))
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow = 2, ncol = 2))
cacheSolve(amatrix)
m1
m2
m1 %*% m2
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow = 2, ncol = 2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
amatrix$get() %*% amatrix$getinverse()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow = 2, ncol = 2))
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow = 2, ncol = 2))
cacheSolve(amatrix)
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$get() <- matrix(1:4,2,2)
amatrix$get <- matrix(1:4,2,2)
amatrix$get
cacheSolve(amatrix)
matrix(1:4,2,2) == matrix(1:4,2,2)
matrix(1:4,2,2) == matrix(2:5,2,2)
idenitcal(matrix(1:4,2,2), matrix(2:5,2,2))
identical(matrix(1:4,2,2), matrix(2:5,2,2))
identical(matrix(1:4,2,2), matrix(1:4,2,2))
!identical(matrix(1:4,2,2), matrix(1:4,2,2))
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$get <- matrix(1:4,2,2)
cacheSolve(amatrix)
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$get <- matrix(1:4,2,2)
cacheSolve(amatrix)
amatrix$get
amatrix$getinverse
amatrix$getinverse()
amatrix$getinverse()%*%amatrix$get
identical(amatrix$get() %*% amatrix$getinverse(), diag(nrow(amatrix$get())))
identical(amatrix$get() %*% amatrix$getinverse(), diag(nrow(amatrix$get())))
identical(amatrix$get %*% amatrix$getinverse(), diag(nrow(amatrix$get())))
identical(amatrix$get %*% amatrix$getinverse(), diag(nrow(amatrix$get))
)
cacheSolve(amatrix)
source("cachematrix.R")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$getinverse
amatrix$getinverse()
amatrix$get
amatrix$get()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$get
amatrix$get()
amatrix$get() <- matrix(1:4,2,2)
amatrix$get <- matrix(1:4,2,2)
amatrix$get()
amatrix$get
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$get
cacheSolve(amatrix)
amatrix$set(matrix(1:4,2,2))
amatrix$get
amatrix$get()
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$set(matrix(1:4,2,2))
cacheSolve(amatrix)
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,4,34,6), nrow = 2, ncol = 2))
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$set(matrix(1:4,2,2))
cacheSolve(amatrix)
cacheSolve(amatrix)
